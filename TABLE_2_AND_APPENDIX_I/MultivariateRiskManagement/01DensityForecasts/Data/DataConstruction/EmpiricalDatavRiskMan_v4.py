#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Purpose:    Empiricial data    Version:    1   Copy relevant functions from RollingWindowv12     2  Date:    2021/08/04Author:    Ramon de Punder """## Imports# Fundamentalsimport numpy as np  from scipy import stats # pre-programmed random variablesfrom scipy import integrate # numerical integration# Systemimport osfrom os import pathimport pandas as pdfrom datetime import datetimefrom datetime import date# Visualisation# Plottingimport matplotlib.pyplot as pltfrom matplotlib import rcimport seaborn as snsimport matplotlib.dates as mdatesimport matplotlib.ticker as mtick# Download data from Yahoo Financeimport yfinance as yfos.environ["PATH"] += os.pathsep + '/Users/ramondepunder/bin' # add MikTex to PATHrc('font', **{'family': 'serif', 'serif': ['Computer Modern'], 'size':'15'})rc('text', usetex=False)lFigureSettings= {'figsize':(10,6), 'dpi':70, 'titlefontsize':16, 'axisfontsize':14} ###########################################################  def FigureData(dfData, sNameFig):     """    Purpose:        Generate subplots Figure 1     Inputs:        dfData      dataframe, contains data with atetimeobject as index            Output:        Subplots Figure 1        """        f = plt.figure(figsize=(13,4))    #plt.axvspan(*mdates.datestr2num(['8/1/2001', '11/30/2001']), color=sns.xkcd_rgb['grey'], alpha=0.5, lw=0)    plt.axvspan(*mdates.datestr2num(['12/1/2007', '6/30/2009']), color=sns.xkcd_rgb['grey'], alpha=0.5, lw=0)    plt.axvspan(*mdates.datestr2num(['2/1/2020', '4/30/2020']), color=sns.xkcd_rgb['grey'], alpha=0.5, lw=0)    plt.plot(pd.DataFrame(0.0, index=dfData.index, columns=[0]), color='k', linewidth=1)    plt.plot(dfData, color='C0')    plt.margins(x=0)    plt.show()    f.savefig(sNameFig+'.pdf', bbox_inches='tight')        ###########################################################  def main():            ## Cleaning    plt.close('all')                        # close all figures        ###########################################################      ## Magic numbers    sStart = "1999-01-01"    sEnd = '2023-12-31' #"2008-03-14"        ## SP500    # Have to download SP500 ourselves from yahoo finance    dfClosingPrices = yf.download("SPY", start=sStart, end=sEnd)['Close'] # SPY is tradeable ETF    dfReturns = np.log(dfClosingPrices[1:]) - np.log(dfClosingPrices.shift(1)[1:])    FigureData(dfReturns, "SP500retadjclosing")    plt.plot(dfReturns)        # Add RV data    dfRMAllFullPeriod = pd.read_csv('RVFullPeriodSP500Trade.csv', sep=',')    dfRMAllFullPeriod.index = dfRMAllFullPeriod['Date']    dfRMAllFullPeriod.index = pd.to_datetime(dfRMAllFullPeriod.index, format='%Y-%m-%d')    dfRMFullPeriod = dfRMAllFullPeriod['Volatility']     dfRMa  = dfRMFullPeriod.loc[sStart:sEnd]    dfRM= pd.DataFrame(data=(dfRMa.values**2)/252, index=dfRMa.index, columns=['rv'])    # Merge data    dfData = dfReturns.merge(dfRM, left_index=True, right_index=True, how='inner')     dfData.to_csv('SP500andRealVolXiu.csv')        ## XLE    # Returns    dfClosingPrices = yf.download('XLE', start=sStart, end=sEnd)['Close']     dfReturns = np.log(dfClosingPrices[1:]) - np.log(dfClosingPrices.shift(1)[1:])    FigureData(dfReturns, "XLEretadjclosing")    plt.plot(dfReturns)        # Add RV data    dfRMAllFullPeriod = pd.read_csv('RVFullPeriodXLETrade.csv')    dfRMAllFullPeriod['Date'] = pd.to_datetime(dfRMAllFullPeriod['Date'])    dfRMAllFullPeriod.set_index('Date', inplace=True)    dfRMAllFullPeriod.sort_index(inplace=True)    dfRMFullPeriod = dfRMAllFullPeriod['Volatility']     dfRMa = dfRMFullPeriod.loc[sStart:sEnd]    dfRM= pd.DataFrame(data=(dfRMa.values**2)/252, index=dfRMa.index, columns=['rv'])    # Merge data    dfData = dfReturns.merge(dfRM, left_index=True, right_index=True, how='inner')     dfData.to_csv('XLEandRealVolXiu.csv')        ## XLF    # Returns    dfClosingPrices = yf.download("XLF", start=sStart, end=sEnd)['Close']     dfReturns = np.log(dfClosingPrices[1:]) - np.log(dfClosingPrices.shift(1)[1:])    FigureData(dfReturns, "XLFretadjclosing")    plt.plot(dfReturns)        # Add RV data    dfRMAllFullPeriod = pd.read_csv('RVFullPeriodXLFTrade.csv')    dfRMAllFullPeriod['Date'] = pd.to_datetime(dfRMAllFullPeriod['Date'])    dfRMAllFullPeriod.set_index('Date', inplace=True)    dfRMAllFullPeriod.sort_index(inplace=True)    dfRMFullPeriod = dfRMAllFullPeriod['Volatility']     dfRMa = dfRMFullPeriod.loc[sStart:sEnd]    dfRM= pd.DataFrame(data=(dfRMa.values**2)/252, index=dfRMa.index, columns=['rv'])    # Merge data    dfData = dfReturns.merge(dfRM, left_index=True, right_index=True, how='inner')     dfData.to_csv('XLFandRealVolXiu.csv')           